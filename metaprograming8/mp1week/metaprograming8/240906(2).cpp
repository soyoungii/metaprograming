
/*
<배열>
- 배열은 같은 자료형을 가진 연속된 메모리 공간으로 이루어진 자료구조
- 같은 자료형을 가진 변수들이 여러개 필요할 때 사용하며 많은 양의 데이터를 처리할 때 유용
- 배열을 선언할 때 지정된 크기 변경 불가
- 배열의 모든 요소는 동일한 데이터 타입을 가져야함
- 연손된 공간에 저장되기 때문에 요소에 대한 인덱스 접근이 매우 빠름


<배열 선언>
- 자료형 배열이름[배열길이];
ex) int arr[5]; -> int 자료형의 변수 5개를 연속적으로 선언
    int number[3] = {1,2,3}; -> int 자료형의 변수 3개를 선언하고 동시에 초기화
    int ints[] = {5,6,7,8}; -> 배열의 길이를 지정하지 않았지만 4개를 사용함으로 4길이의 배열

<인덱스(index)>
- 배열의 요소를 접근하기 위한 수단 []사이에 인덱스를 통해 요소에 접근
- 인덱스는 0부터 시작하며 길이가 n인 배열은 n-1까지의 인덱스를 가질 수 있다

<배열의 길이>
- 배열은 같은 자료형을 연속적으로 배치하는 방식 전체크기 / 하나의 크기를 통해 길이를 확인 가능


이름, 점수, 번호
배열
표를 그린다> 배열을 선언 
표의 번호로 숫자와 문자를 구별하는 것 -> 배열에 저장된 데이터를 참조한다.
*/

#include<iostream>

int main()
{
	// 1. 크기를 명시하고 초기화
	// int arr[3] = { 1,3,5 };
	// 2. 배열의 크기를 생략하고 초기화
	// int ints[] = { 5,6,7,8 };
	// 3. 크기를 명시적으로 지정하고 일부 요소만 초기화
	// int arr[5] = { 1,2,3 }; // 1,2,3을 제외한 나머지는 0으로 초기화
	// 4. 모든 요소를 초기화하지 않으면 전부 기본값으로 초기화
	// int arr[5] = {}; // 0으로 초기화
	int arr[5] = { 1,3,5 };
	std::cout << "arr 배열의 0번째 인덱스에 저장되어 있는 데이터(요소) : " << arr[0] << std::endl;
	std::cout << "arr 배열의 1번째 인덱스에 저장되어 있는 데이터(요소) : " << arr[1] << std::endl;
	std::cout << "arr 배열의 2번째 인덱스에 저장되어 있는 데이터(요소) : " << arr[2] << std::endl;
	std::cout << "arr 배열의 2번째 인덱스에 저장되어 있는 데이터(요소) : " << arr[3] << std::endl;
	std::cout << "arr 배열의 2번째 인덱스에 저장되어 있는 데이터(요소) : " << arr[4] << std::endl;

	// <배열의 길이>
	// 배열은 같은 자료형을 연속적으로 배치하는 방식. '전체크기/하나의 크기'를 통해 길이를 확인 가능

	std::cout << "arr 배열의 길이 : " << sizeof(arr) << sizeof(arr[0]) << std::endl;

	arr[0] = 100;
	std::cout << "arr 배열의 0번째 인덱스에 저장되어 있는 데이터(요소) : " << arr[0] << std::endl;

	int numbers[5] = { 10,20,30,40,50 };

	for (int i = 0; i < 5; i++)
	{
		std::cout << "각 인덱스에 저장된 데이터 : " << i << "번째 : " << numbers[i] << std::endl;

		/*
		각 인덱스에 저장된 데이터 : 0번째 : 10
		각 인덱스에 저장된 데이터 : 1번째 : 20
		각 인덱스에 저장된 데이터 : 2번째 : 30
		각 인덱스에 저장된 데이터 : 3번째 : 40
		각 인덱스에 저장된 데이터 : 4번째 : 50
		*/
	}
	// 배열에 저장된 숫자를 찾아볼까요?

	int numbers1[10] = { 1,2,3,4,5,6,7,8,9,10 };

	int select;
	bool isFind = false;
	std::cin >> select;

	for (int i = 0; i < 10; i++)
	{
		if (numbers[i] == select)
		{
			isFind = true;
			break;
		}
	}

	if (isFind)
	{
		std::cout << "찾음" << std::endl;
	}
	else
	{
		std::cout << "없음" << std::endl;
	}

	// 배열에 저장된 모든 요소의 합을 구해볼까?
	// 1. 정수형 배열 선언
	int number2[] = { 1,2,3,4,5 };
	// 결과용 변수
	int sum = 0;
	// 배열의 각 인덱스 저장되어 있는 값을 반복하면서 누적(sum)
	for (int i = 0; i < 5; i++) {
		// 각 요소의 값을 sum에 누적
		sum += number2[i]; // 0번째 인덱스에 있는 1 + 1번째 인덱스에 있는 2
	}

	int arr1[4] = { 1,2,3,4 };
	std::cout << arr1 << std::endl;
	std::cout << &arr1[0] << std::endl; // & 붙이면 저장된 데이터의 주소를 리턴
	std::cout << &arr1[1] << std::endl;
	std::cout << &arr1[2] << std::endl;
	std::cout << &arr1[3] << std::endl;

	// 10명의 학생 성적을 입력 -> 배열에 저장. 총점과 평균을 구하려면
	// 우선 저장할 배열이 있어야 함
	// 합계를 구할 변수가 있어야 함

	int jumsu[10];
	int sum1 = 0;

	// 입력을 받아보자
	for (int i = 0; i < 10; i++)
	{
		std::cout << "내가 입력한 학생의 점수는 : " << std::endl;
		std::cout << i + 1 << "번째 학생 : ";
		std::cin >> jumsu[i];
	}

	// 연산
	for (int i = 0; i < 10; i++)
	{
		sum1 += jumsu[i];
	}

	// 결과
	std::cout << "총점 : " << sum1 << "평균 : " << sum1 / 10;

	/*==========================================*/

	// int arr[4];

	/*int arr[4][3];

	arr[0][0] = 1;
	arr[0][1] = 2;
	arr[0][2] = 3;

	arr[1][0] = 4;
	arr[1][1] = 5;
	arr[1][2] = 6;

	arr[2][0] = 7;
	arr[2][1] = 8;
	arr[2][2] = 9;

	arr[3][0] = 10;
	arr[3][1] = 11;
	arr[3][2] = 12;

	std::cout << " " << arr[0][0] << " , " << arr[0][1] << " , " << arr[0][2] << std::endl;
	std::cout << " " << arr[1][0] << " , " << arr[1][1] << " , " << arr[1][2] << std::endl;
	std::cout << " " << arr[2][0] << " , " << arr[2][1] << " , " << arr[2][2] << std::endl;
	std::cout << " " << arr[3][0] << " , " << arr[3][1] << " , " << arr[3][2] << std::endl;

	std::cout << "===========================================" << std::endl;
	std::cout << " " << &arr[0][0] << " , " << &arr[0][1] << " , " << &arr[0][2] << std::endl;
	std::cout << " " << &arr[1][0] << " , " << &arr[1][1] << " , " << &arr[1][2] << std::endl;*/
	//
	//	int arr1[4][3] = { 1,2,3,4,5,6,7,8,9,10,11,12 };
	//	int arr2[4][3] = { 1,2,3,4,5 };
	//
	//	for (int i = 0; i < 4; i++)
	//	{
	//		std::cout << std::endl;
	//		for (int k = 0; k < 3; k++)
	//		{
	//			std::cout << arr1[i][k] << " ";
	//		}
	//	}
	//
	//	for (int i = 0; i < 4; i++) 
	//	{
	//		std::cout << std::endl;
	//		for (int k = 0; k < 3; k++) 
	//		{
	//			std::cout << arr2[i][k] << " ";
	//		}
	//	}
	//
	//	int arr3[4][3] = { {1,2},{3},{4},{5} };
	//	int arr4[4][3] = { {1,2,3},{4,5,6},{7,8,9},{10} };
	//
	//	for (int i = 0; i < 4; i++)
	//	{
	//		std::cout << std::endl;
	//		for (int k = 0; k < 3; k++)
	//		{
	//			std::cout << arr3[i][k] << " ";
	//		}
	//	}
	//
	//	for (int i = 0; i < 4; i++) 
	//	{
	//		std::cout << std::endl;
	//		for (int k = 0; k < 3; k++) 
	//		{
	//			std::cout << arr4[i][k] << " ";
	//		}
	//	}
	//
}