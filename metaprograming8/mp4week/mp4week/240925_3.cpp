/*
Recursive Function(재귀)
- 자신을 정의하거나 호출하는 함수
- 프로그래밍에서의 재귀는 복잡한 문제를 더 단순한 하위 문제로 나누어 해결하는데 사용

기본구조
1. 기저조건(종료조건): 이 조건이 충족되면 함수는 더이상 자기자신을 호출하지 않고 종료
                      모든 재귀함수는 적어도 하나의 종료조건을 가져야함.

2. 재귀단계: 함수가 자기 자신을 호출하는 단계. 이 단계에서 더 작은 하위 문제로 분해


장점
- 복잡한 문제를 더 작은 문제로 분할하여 간결하게 해결 가능
- 반복문을 쓰지 않고 재귀적호출을 통해 해결 가능
- 트리나 그래프와 같은 구조를 처리할 때 재귀는 직관적인 방법을 제공

단점
- 성능문제: 재귀호출마다 함수 호출스택에 기록되므로 메모리 사용량이 증가할 수 있음
- 이해하기 어려움 복잡한 재귀는 디버깅이 어려울 수 있음
*/

//팩토리얼: n부터 1까지의 모든 정수의 곱

#include<iostream>

int factorial(int n)
{
    //조건
    if (n <= 1)return 1;

    //재귀 단계: n*(n-1)의 팩토리얼
    return n * factorial(n - 1);
}

int main()
{
    int res = factorial(3);
    std::cout << res << std::endl; //6


}

//과제(재귀)
//1. 피보나치수열(첫번째, 두번째 항이 1이고 그 다음 항부터는 앞 두항의 합)
// ex) 1,1,2,3,5,8,13....
// 피보나치 수열의 n번째 항은 (n-1)+(n-2)
//2. 하노이 탑
//3. 싱글링크드리스트 delete 구현하기